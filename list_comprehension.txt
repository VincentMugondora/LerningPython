What is List Comprehension in Python?
List comprehension is a concise and elegant way to create new lists in Python by transforming or filtering elements from an existing iterable (such as a list, string, tuple, or range). It allows you to write compact and readable code compared to traditional loops.

Syntax of List Comprehension
The general syntax for list comprehension is:

python
new_list = [expression for item in iterable if condition]
expression: The operation or transformation applied to each element.

item: The variable representing each element in the iterable.

iterable: The source of elements (e.g., list, range, string).

condition (optional): A filter that determines whether the element is included in the new list.

Basic Examples
1. Simple List Comprehension
Create a new list by copying elements from an existing list.

python
numbers = [1, 2, 3, 4]
squared_numbers = [x**2 for x in numbers]
print(squared_numbers)  # Output: [1, 4, 9, 16]
2. With a Condition (if)
Include only elements that satisfy a condition.

python
numbers = [1, 2, 3, 4, 5]
even_numbers = [x for x in numbers if x % 2 == 0]
print(even_numbers)  # Output: [2, 4]
3. With if-else
Apply different transformations based on conditions.

python
numbers = [1, 2, 3, 4]
result = ['Even' if x % 2 == 0 else 'Odd' for x in numbers]
print(result)  # Output: ['Odd', 'Even', 'Odd', 'Even']
Advanced Examples
1. Nested Loops
List comprehensions can include multiple for loops.

python
pairs = [(x, y) for x in range(3) for y in range(3)]
print(pairs)
# Output: [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
2. Flattening Nested Lists
Flatten a list of lists into a single list.

python
nested_list = [[1, 2], [3, 4], [5]]
flattened = [num for sublist in nested_list for num in sublist]
print(flattened)  # Output: [1, 2, 3, 4, 5]
Comparison with Traditional Loops
Using a Loop:
python
numbers = [1, 2, 3]
squared_numbers = []
for x in numbers:
    squared_numbers.append(x**2)
print(squared_numbers)  # Output: [1, 4, 9]
Using List Comprehension:
python
squared_numbers = [x**2 for x in numbers]
print(squared_numbers)  # Output: [1, 4, 9]
List comprehensions reduce the number of lines and make the code more readable.

Benefits of List Comprehensions
Conciseness: Reduces code length compared to traditional loops.

Readability: Easier to understand when used appropriately.

Performance: Often faster than equivalent loops due to Python's internal optimizations37.

When to Use List Comprehensions
Use list comprehensions when:

You want to create a new list by transforming or filtering elements from an existing iterable.

The logic is simple enough to fit into one line without sacrificing readability.

Avoid using them if:

The logic becomes too complex or nested. In such cases, traditional loops may be more readable47.

Example Recap:
python
# Doubling numbers
numbers = [1, 2, 3]
doubled = [x * 2 for x in numbers]  
print(doubled)  
# Output: [2, 4, 6]

# Filtering even numbers
even_numbers = [x for x in numbers if x % 2 == 0]  
print(even_numbers)  
# Output: [2]

# Nested loops
nested_result = [(x, y) for x in range(3) for y in range(3)]
print(nested_result)
# Output: [(0,0), (0,1), (0,2), (1,0), ... ]
